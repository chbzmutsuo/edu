datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Department {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @default(now()) @updatedAt()
  sortOrder Float     @default(0)

  code  String? @unique
  name  String
  color String?

  User User[]
}

model User {
  id            Int       @id @default(autoincrement())
  code          String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @default(now()) @updatedAt()
  sortOrder     Float     @default(0)
  active        Boolean   @default(true)
  hiredAt       DateTime?
  yukyuCategory String?   @default("A")

  name     String
  kana     String?
  email    String? @unique
  password String? @default("999999")

  type String?

  role String @default("user")

  tempResetCode        String?
  tempResetCodeExpired DateTime?
  storeId              Int?
  schoolId             Int?
  rentaStoreId         Int?
  type2                String?
  shopId               Int?
  membershipName       String?
  damageNameMasterId   Int?
  color                String?
  app                  String?
  apps                 String[]

  // tbm

  employeeCode String? @unique
  phone        String?

  familyId Int? // Sara家族ID
  avatar   String? // 子ども用アバター画像URL

  School School? @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  VideoFromUser           VideoFromUser[]
  Comment                 Comment[]
  LessonLog               LessonLog[]
  LessonLogAuthorizedUser LessonLogAuthorizedUser[]

  Payment        Payment[]
  SystemChat     SystemChat[]    @relation("user")
  SystemChatRoom SystemChatRoom?
  Ticket         Ticket[]

  GenbaDayShift GenbaDayShift[]
  SohkenCar     SohkenCar[]

  bcc String?

  UserRole   UserRole[]
  AqSaleCart AqSaleCart[]

  AqCustomerRecord AqCustomerRecord[]

  AqSaleRecord AqSaleRecord[]

  // TbmOperation                     TbmOperation[]
  // TbmOperationGroup                TbmOperationGroup[]
  AqCustomer        AqCustomer[]
  TbmBase           TbmBase?            @relation(fields: [tbmBaseId], references: [id])
  tbmBaseId         Int?
  TbmDriveSchedule  TbmDriveSchedule[]
  UserWorkStatus    UserWorkStatus[]
  OdometerInput     OdometerInput[]
  TbmRefuelHistory  TbmRefuelHistory[]
  DayRemarksUser    DayRemarksUser[]
  TbmCarWashHistory TbmCarWashHistory[]
  PurchaseRequest   PurchaseRequest[]
  LeaveRequest      LeaveRequest[]
  Approval          Approval[]

  KyuyoTableRecord KyuyoTableRecord[]
  Department       Department?        @relation(fields: [departmentId], references: [id])
  departmentId     Int?
  HealthRecord     HealthRecord[]
  HealthJournal    HealthJournal[]

  // Sara App リレーション
  Family                Family?                     @relation("FamilyUsers", fields: [familyId], references: [id])
  RequestedEvaluations  ActivityEvaluationRequest[] @relation("RequestedBy")
  ApprovedEvaluations   ActivityEvaluationRequest[] @relation("ApprovedBy")
  // TbmVehicle           TbmVehicle?
  TbmVehicle            TbmVehicle?                 @relation(fields: [tbmVehicleId], references: [id])
  tbmVehicleId          Int?
  SbmReservation        SbmReservation[]
  SbmDeliveryAssignment SbmDeliveryAssignment[]

  // トレーニングアプリ リレーション
  ExerciseMaster              ExerciseMaster[]
  WorkoutLog                  WorkoutLog[]
  SbmReservationChangeHistory SbmReservationChangeHistory[]
  CounselingStore             CounselingStore?              @relation(fields: [counselingStoreId], references: [id])
  counselingStoreId           Int?
  CounselingSlot              CounselingSlot[]
}

model ReleaseNotes {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @default(now()) @updatedAt()
  sortOrder Float     @default(0)

  rootPath         String
  title            String?
  msg              String
  imgUrl           String?
  confirmedUserIds Int[]
}

model Tokens {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @default(now()) @updatedAt()
  sortOrder Float     @default(0)

  name      String    @unique
  token     String
  expiresAt DateTime?
}

model GoogleAccessToken {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @default(now()) @updatedAt()
  sortOrder Float     @default(0)

  email         String    @unique
  access_token  String?
  refresh_token String?
  scope         String?
  token_type    String?
  id_token      String?
  expiry_date   DateTime?
  tokenJSON     String?
}

model RoleMaster {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  sortOrder Float     @default(0)

  name        String     @unique
  description String?
  color       String?
  apps        String[]
  UserRole    UserRole[]
}

model UserRole {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  sortOrder Float     @default(0)

  User         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  RoleMaster   RoleMaster @relation(fields: [roleMasterId], references: [id], onDelete: Cascade)
  roleMasterId Int

  @@unique([userId, roleMasterId], name: "userId_roleMasterId_unique")
}

model ChainMethodLock {
  id        Int       @id @default(autoincrement())
  isLocked  Boolean   @default(false)
  expiresAt DateTime?
  updatedAt DateTime  @updatedAt
}

model Calendar {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @default(now()) @updatedAt()
  sortOrder Float     @default(0)

  date DateTime @unique

  holidayType String @default("出勤")
}
